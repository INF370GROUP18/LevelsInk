//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nati_Supermarket_and_Takeaway_WinForms
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NatiSupermarketandTakeawayFinalEntities : DbContext
    {
        public NatiSupermarketandTakeawayFinalEntities()
            : base("name=NatiSupermarketandTakeawayFinalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Audit_Log> Audit_Log { get; set; }
        public virtual DbSet<Backup> Backups { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employee_Access_Level> Employee_Access_Level { get; set; }
        public virtual DbSet<Employee_Shift> Employee_Shift { get; set; }
        public virtual DbSet<Employee_Title> Employee_Title { get; set; }
        public virtual DbSet<Employee_Type> Employee_Type { get; set; }
        public virtual DbSet<Food_Order_Line> Food_Order_Line { get; set; }
        public virtual DbSet<Inventory_Item> Inventory_Item { get; set; }
        public virtual DbSet<Inventory_Item_Type> Inventory_Item_Type { get; set; }
        public virtual DbSet<Inventory_Price> Inventory_Price { get; set; }
        public virtual DbSet<Inventory_Write_off_Line> Inventory_Write_off_Line { get; set; }
        public virtual DbSet<Menu_Item> Menu_Item { get; set; }
        public virtual DbSet<Menu_Item_Category> Menu_Item_Category { get; set; }
        public virtual DbSet<Menu_Item_Price> Menu_Item_Price { get; set; }
        public virtual DbSet<Prepare_Inventory_Line> Prepare_Inventory_Line { get; set; }
        public virtual DbSet<Prepare_Inventory_Type> Prepare_Inventory_Type { get; set; }
        public virtual DbSet<Sale_Status> Sale_Status { get; set; }
        public virtual DbSet<Sale_Type> Sale_Type { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<Sales_Line> Sales_Line { get; set; }
        public virtual DbSet<Security_Question> Security_Question { get; set; }
        public virtual DbSet<Slot> Slots { get; set; }
        public virtual DbSet<Stock_Take> Stock_Take { get; set; }
        public virtual DbSet<Stock_Take_Line> Stock_Take_Line { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Supplier_Order> Supplier_Order { get; set; }
        public virtual DbSet<Supplier_Order_List> Supplier_Order_List { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Unit_Of_Measure> Unit_Of_Measure { get; set; }
        public virtual DbSet<Supplier_Payment> Supplier_Payment { get; set; }
        public virtual DbSet<Inventory_Write_Off> Inventory_Write_Off { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAddInventoryItem(string inventoryName, Nullable<int> inventoryQuantity, Nullable<int> inventoryBarcode, Nullable<int> inventoryUnitOfMeasureID, Nullable<int> inventoryTypeID, Nullable<int> inventoryID, Nullable<decimal> inventoryPrice, Nullable<System.DateTime> inventoryPriceDate, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var inventoryNameParameter = inventoryName != null ?
                new ObjectParameter("InventoryName", inventoryName) :
                new ObjectParameter("InventoryName", typeof(string));
    
            var inventoryQuantityParameter = inventoryQuantity.HasValue ?
                new ObjectParameter("InventoryQuantity", inventoryQuantity) :
                new ObjectParameter("InventoryQuantity", typeof(int));
    
            var inventoryBarcodeParameter = inventoryBarcode.HasValue ?
                new ObjectParameter("InventoryBarcode", inventoryBarcode) :
                new ObjectParameter("InventoryBarcode", typeof(int));
    
            var inventoryUnitOfMeasureIDParameter = inventoryUnitOfMeasureID.HasValue ?
                new ObjectParameter("InventoryUnitOfMeasureID", inventoryUnitOfMeasureID) :
                new ObjectParameter("InventoryUnitOfMeasureID", typeof(int));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var inventoryPriceParameter = inventoryPrice.HasValue ?
                new ObjectParameter("InventoryPrice", inventoryPrice) :
                new ObjectParameter("InventoryPrice", typeof(decimal));
    
            var inventoryPriceDateParameter = inventoryPriceDate.HasValue ?
                new ObjectParameter("InventoryPriceDate", inventoryPriceDate) :
                new ObjectParameter("InventoryPriceDate", typeof(System.DateTime));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddInventoryItem", inventoryNameParameter, inventoryQuantityParameter, inventoryBarcodeParameter, inventoryUnitOfMeasureIDParameter, inventoryTypeIDParameter, inventoryIDParameter, inventoryPriceParameter, inventoryPriceDateParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddMenuItem(string menuName, Nullable<int> menuCatID, Nullable<int> menuID, Nullable<decimal> menuPrice, Nullable<System.DateTime> menuPriceDate, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var menuNameParameter = menuName != null ?
                new ObjectParameter("MenuName", menuName) :
                new ObjectParameter("MenuName", typeof(string));
    
            var menuCatIDParameter = menuCatID.HasValue ?
                new ObjectParameter("MenuCatID", menuCatID) :
                new ObjectParameter("MenuCatID", typeof(int));
    
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var menuPriceParameter = menuPrice.HasValue ?
                new ObjectParameter("MenuPrice", menuPrice) :
                new ObjectParameter("MenuPrice", typeof(decimal));
    
            var menuPriceDateParameter = menuPriceDate.HasValue ?
                new ObjectParameter("MenuPriceDate", menuPriceDate) :
                new ObjectParameter("MenuPriceDate", typeof(System.DateTime));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddMenuItem", menuNameParameter, menuCatIDParameter, menuIDParameter, menuPriceParameter, menuPriceDateParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddSupplier(string supplierName, string supplierSurname, string supplierCellphoneNumber, string supplierTelephone, string supplierEmail, string supplierLocation, string bankName, string branchCode, string accountNumber, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierSurnameParameter = supplierSurname != null ?
                new ObjectParameter("SupplierSurname", supplierSurname) :
                new ObjectParameter("SupplierSurname", typeof(string));
    
            var supplierCellphoneNumberParameter = supplierCellphoneNumber != null ?
                new ObjectParameter("SupplierCellphoneNumber", supplierCellphoneNumber) :
                new ObjectParameter("SupplierCellphoneNumber", typeof(string));
    
            var supplierTelephoneParameter = supplierTelephone != null ?
                new ObjectParameter("SupplierTelephone", supplierTelephone) :
                new ObjectParameter("SupplierTelephone", typeof(string));
    
            var supplierEmailParameter = supplierEmail != null ?
                new ObjectParameter("SupplierEmail", supplierEmail) :
                new ObjectParameter("SupplierEmail", typeof(string));
    
            var supplierLocationParameter = supplierLocation != null ?
                new ObjectParameter("SupplierLocation", supplierLocation) :
                new ObjectParameter("SupplierLocation", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSupplier", supplierNameParameter, supplierSurnameParameter, supplierCellphoneNumberParameter, supplierTelephoneParameter, supplierEmailParameter, supplierLocationParameter, bankNameParameter, branchCodeParameter, accountNumberParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddEmployee(string employeeName, string employeeSurname, string employeeCellphoneNumber, string employeeAddress, string employeeEmail, string employeePassword, Nullable<int> employeeSecurityQuestionID, string employeeSecurityAnswer, byte[] employeePicture, string bankName, string branchCode, string accountNumber, Nullable<int> employeeTitle, Nullable<int> employeeType, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeSurnameParameter = employeeSurname != null ?
                new ObjectParameter("EmployeeSurname", employeeSurname) :
                new ObjectParameter("EmployeeSurname", typeof(string));
    
            var employeeCellphoneNumberParameter = employeeCellphoneNumber != null ?
                new ObjectParameter("EmployeeCellphoneNumber", employeeCellphoneNumber) :
                new ObjectParameter("EmployeeCellphoneNumber", typeof(string));
    
            var employeeAddressParameter = employeeAddress != null ?
                new ObjectParameter("EmployeeAddress", employeeAddress) :
                new ObjectParameter("EmployeeAddress", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeePasswordParameter = employeePassword != null ?
                new ObjectParameter("EmployeePassword", employeePassword) :
                new ObjectParameter("EmployeePassword", typeof(string));
    
            var employeeSecurityQuestionIDParameter = employeeSecurityQuestionID.HasValue ?
                new ObjectParameter("EmployeeSecurityQuestionID", employeeSecurityQuestionID) :
                new ObjectParameter("EmployeeSecurityQuestionID", typeof(int));
    
            var employeeSecurityAnswerParameter = employeeSecurityAnswer != null ?
                new ObjectParameter("EmployeeSecurityAnswer", employeeSecurityAnswer) :
                new ObjectParameter("EmployeeSecurityAnswer", typeof(string));
    
            var employeePictureParameter = employeePicture != null ?
                new ObjectParameter("EmployeePicture", employeePicture) :
                new ObjectParameter("EmployeePicture", typeof(byte[]));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var employeeTitleParameter = employeeTitle.HasValue ?
                new ObjectParameter("EmployeeTitle", employeeTitle) :
                new ObjectParameter("EmployeeTitle", typeof(int));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddEmployee", employeeNameParameter, employeeSurnameParameter, employeeCellphoneNumberParameter, employeeAddressParameter, employeeEmailParameter, employeePasswordParameter, employeeSecurityQuestionIDParameter, employeeSecurityAnswerParameter, employeePictureParameter, bankNameParameter, branchCodeParameter, accountNumberParameter, employeeTitleParameter, employeeTypeParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spUpdateInventoryItem(string inventoryName, Nullable<int> inventoryQuantity, Nullable<int> inventoryBarcode, Nullable<int> inventoryUnitOfMeasureID, Nullable<int> inventoryTypeID, Nullable<int> inventoryID, Nullable<decimal> inventoryPrice, Nullable<System.DateTime> inventoryPriceDate, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var inventoryNameParameter = inventoryName != null ?
                new ObjectParameter("InventoryName", inventoryName) :
                new ObjectParameter("InventoryName", typeof(string));
    
            var inventoryQuantityParameter = inventoryQuantity.HasValue ?
                new ObjectParameter("InventoryQuantity", inventoryQuantity) :
                new ObjectParameter("InventoryQuantity", typeof(int));
    
            var inventoryBarcodeParameter = inventoryBarcode.HasValue ?
                new ObjectParameter("InventoryBarcode", inventoryBarcode) :
                new ObjectParameter("InventoryBarcode", typeof(int));
    
            var inventoryUnitOfMeasureIDParameter = inventoryUnitOfMeasureID.HasValue ?
                new ObjectParameter("InventoryUnitOfMeasureID", inventoryUnitOfMeasureID) :
                new ObjectParameter("InventoryUnitOfMeasureID", typeof(int));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var inventoryPriceParameter = inventoryPrice.HasValue ?
                new ObjectParameter("InventoryPrice", inventoryPrice) :
                new ObjectParameter("InventoryPrice", typeof(decimal));
    
            var inventoryPriceDateParameter = inventoryPriceDate.HasValue ?
                new ObjectParameter("InventoryPriceDate", inventoryPriceDate) :
                new ObjectParameter("InventoryPriceDate", typeof(System.DateTime));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateInventoryItem", inventoryNameParameter, inventoryQuantityParameter, inventoryBarcodeParameter, inventoryUnitOfMeasureIDParameter, inventoryTypeIDParameter, inventoryIDParameter, inventoryPriceParameter, inventoryPriceDateParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spUpdateMenuItem(string menuName, Nullable<int> menuCatID, Nullable<int> menuID, Nullable<decimal> menuPrice, Nullable<System.DateTime> menuPriceDate, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var menuNameParameter = menuName != null ?
                new ObjectParameter("MenuName", menuName) :
                new ObjectParameter("MenuName", typeof(string));
    
            var menuCatIDParameter = menuCatID.HasValue ?
                new ObjectParameter("MenuCatID", menuCatID) :
                new ObjectParameter("MenuCatID", typeof(int));
    
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var menuPriceParameter = menuPrice.HasValue ?
                new ObjectParameter("MenuPrice", menuPrice) :
                new ObjectParameter("MenuPrice", typeof(decimal));
    
            var menuPriceDateParameter = menuPriceDate.HasValue ?
                new ObjectParameter("MenuPriceDate", menuPriceDate) :
                new ObjectParameter("MenuPriceDate", typeof(System.DateTime));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMenuItem", menuNameParameter, menuCatIDParameter, menuIDParameter, menuPriceParameter, menuPriceDateParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spUpdateSupplier(Nullable<int> supplierID, string supplierName, string supplierSurname, string supplierCellphoneNumber, string supplierTelephone, string supplierEmail, string supplierLocation, string bankName, string branchCode, string accountNumber, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierSurnameParameter = supplierSurname != null ?
                new ObjectParameter("SupplierSurname", supplierSurname) :
                new ObjectParameter("SupplierSurname", typeof(string));
    
            var supplierCellphoneNumberParameter = supplierCellphoneNumber != null ?
                new ObjectParameter("SupplierCellphoneNumber", supplierCellphoneNumber) :
                new ObjectParameter("SupplierCellphoneNumber", typeof(string));
    
            var supplierTelephoneParameter = supplierTelephone != null ?
                new ObjectParameter("SupplierTelephone", supplierTelephone) :
                new ObjectParameter("SupplierTelephone", typeof(string));
    
            var supplierEmailParameter = supplierEmail != null ?
                new ObjectParameter("SupplierEmail", supplierEmail) :
                new ObjectParameter("SupplierEmail", typeof(string));
    
            var supplierLocationParameter = supplierLocation != null ?
                new ObjectParameter("SupplierLocation", supplierLocation) :
                new ObjectParameter("SupplierLocation", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSupplier", supplierIDParameter, supplierNameParameter, supplierSurnameParameter, supplierCellphoneNumberParameter, supplierTelephoneParameter, supplierEmailParameter, supplierLocationParameter, bankNameParameter, branchCodeParameter, accountNumberParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spUpdateEmployee(Nullable<int> employeeID, string employeeName, string employeeSurname, string employeeCellphoneNumber, string employeeAddress, string employeeEmail, string employeePassword, Nullable<int> employeeSecurityQuestionID, string employeeSecurityAnswer, byte[] employeePicture, string bankName, string branchCode, string accountNumber, Nullable<int> employeeTitle, Nullable<int> employeeType, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeSurnameParameter = employeeSurname != null ?
                new ObjectParameter("EmployeeSurname", employeeSurname) :
                new ObjectParameter("EmployeeSurname", typeof(string));
    
            var employeeCellphoneNumberParameter = employeeCellphoneNumber != null ?
                new ObjectParameter("EmployeeCellphoneNumber", employeeCellphoneNumber) :
                new ObjectParameter("EmployeeCellphoneNumber", typeof(string));
    
            var employeeAddressParameter = employeeAddress != null ?
                new ObjectParameter("EmployeeAddress", employeeAddress) :
                new ObjectParameter("EmployeeAddress", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeePasswordParameter = employeePassword != null ?
                new ObjectParameter("EmployeePassword", employeePassword) :
                new ObjectParameter("EmployeePassword", typeof(string));
    
            var employeeSecurityQuestionIDParameter = employeeSecurityQuestionID.HasValue ?
                new ObjectParameter("EmployeeSecurityQuestionID", employeeSecurityQuestionID) :
                new ObjectParameter("EmployeeSecurityQuestionID", typeof(int));
    
            var employeeSecurityAnswerParameter = employeeSecurityAnswer != null ?
                new ObjectParameter("EmployeeSecurityAnswer", employeeSecurityAnswer) :
                new ObjectParameter("EmployeeSecurityAnswer", typeof(string));
    
            var employeePictureParameter = employeePicture != null ?
                new ObjectParameter("EmployeePicture", employeePicture) :
                new ObjectParameter("EmployeePicture", typeof(byte[]));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var employeeTitleParameter = employeeTitle.HasValue ?
                new ObjectParameter("EmployeeTitle", employeeTitle) :
                new ObjectParameter("EmployeeTitle", typeof(int));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmployee", employeeIDParameter, employeeNameParameter, employeeSurnameParameter, employeeCellphoneNumberParameter, employeeAddressParameter, employeeEmailParameter, employeePasswordParameter, employeeSecurityQuestionIDParameter, employeeSecurityAnswerParameter, employeePictureParameter, bankNameParameter, branchCodeParameter, accountNumberParameter, employeeTitleParameter, employeeTypeParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spDeleteEmployee(Nullable<int> employeeID, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteEmployee", employeeIDParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spDeleteSupplier(Nullable<int> supplierID, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSupplier", supplierIDParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spDeleteInventoryItem(Nullable<int> inventoryItemID, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var inventoryItemIDParameter = inventoryItemID.HasValue ?
                new ObjectParameter("InventoryItemID", inventoryItemID) :
                new ObjectParameter("InventoryItemID", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteInventoryItem", inventoryItemIDParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spDeleteMenuItem(Nullable<int> menuItemID, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("MenuItemID", menuItemID) :
                new ObjectParameter("MenuItemID", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteMenuItem", menuItemIDParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spStockTake(Nullable<int> inventoryID, Nullable<int> quantityAvailable, string type, Nullable<int> typeQuantity, Nullable<int> stockTakeID, Nullable<System.DateTime> stockTakeDate, Nullable<System.TimeSpan> stockTakeTime, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var quantityAvailableParameter = quantityAvailable.HasValue ?
                new ObjectParameter("QuantityAvailable", quantityAvailable) :
                new ObjectParameter("QuantityAvailable", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var typeQuantityParameter = typeQuantity.HasValue ?
                new ObjectParameter("TypeQuantity", typeQuantity) :
                new ObjectParameter("TypeQuantity", typeof(int));
    
            var stockTakeIDParameter = stockTakeID.HasValue ?
                new ObjectParameter("StockTakeID", stockTakeID) :
                new ObjectParameter("StockTakeID", typeof(int));
    
            var stockTakeDateParameter = stockTakeDate.HasValue ?
                new ObjectParameter("StockTakeDate", stockTakeDate) :
                new ObjectParameter("StockTakeDate", typeof(System.DateTime));
    
            var stockTakeTimeParameter = stockTakeTime.HasValue ?
                new ObjectParameter("StockTakeTime", stockTakeTime) :
                new ObjectParameter("StockTakeTime", typeof(System.TimeSpan));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStockTake", inventoryIDParameter, quantityAvailableParameter, typeParameter, typeQuantityParameter, stockTakeIDParameter, stockTakeDateParameter, stockTakeTimeParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spPrepareInventory(Nullable<int> inventoryID, Nullable<int> prepareInventoryTypeID, Nullable<int> quantity, Nullable<System.DateTime> date, Nullable<System.TimeSpan> time, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var prepareInventoryTypeIDParameter = prepareInventoryTypeID.HasValue ?
                new ObjectParameter("PrepareInventoryTypeID", prepareInventoryTypeID) :
                new ObjectParameter("PrepareInventoryTypeID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPrepareInventory", inventoryIDParameter, prepareInventoryTypeIDParameter, quantityParameter, dateParameter, timeParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddFoodSale(Nullable<System.TimeSpan> saleTime, Nullable<System.DateTime> saleDate, Nullable<int> saleTypeID, Nullable<int> statusID, Nullable<int> employeeID, Nullable<int> salesID, Nullable<int> menuID, string menuNote, Nullable<int> menuQuantity, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var saleTimeParameter = saleTime.HasValue ?
                new ObjectParameter("SaleTime", saleTime) :
                new ObjectParameter("SaleTime", typeof(System.TimeSpan));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var menuNoteParameter = menuNote != null ?
                new ObjectParameter("MenuNote", menuNote) :
                new ObjectParameter("MenuNote", typeof(string));
    
            var menuQuantityParameter = menuQuantity.HasValue ?
                new ObjectParameter("MenuQuantity", menuQuantity) :
                new ObjectParameter("MenuQuantity", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddFoodSale", saleTimeParameter, saleDateParameter, saleTypeIDParameter, statusIDParameter, employeeIDParameter, salesIDParameter, menuIDParameter, menuNoteParameter, menuQuantityParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddMenuCategory(string categoryName, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddMenuCategory", categoryNameParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddInventorySale(Nullable<System.TimeSpan> saleTime, Nullable<System.DateTime> saleDate, Nullable<int> saleTypeID, Nullable<int> statusID, Nullable<int> employeeID, Nullable<int> salesID, Nullable<int> inventoryID, Nullable<int> inventoryQuantity, Nullable<int> newQuantity, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var saleTimeParameter = saleTime.HasValue ?
                new ObjectParameter("SaleTime", saleTime) :
                new ObjectParameter("SaleTime", typeof(System.TimeSpan));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("SaleDate", saleDate) :
                new ObjectParameter("SaleDate", typeof(System.DateTime));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var inventoryQuantityParameter = inventoryQuantity.HasValue ?
                new ObjectParameter("InventoryQuantity", inventoryQuantity) :
                new ObjectParameter("InventoryQuantity", typeof(int));
    
            var newQuantityParameter = newQuantity.HasValue ?
                new ObjectParameter("NewQuantity", newQuantity) :
                new ObjectParameter("NewQuantity", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddInventorySale", saleTimeParameter, saleDateParameter, saleTypeIDParameter, statusIDParameter, employeeIDParameter, salesIDParameter, inventoryIDParameter, inventoryQuantityParameter, newQuantityParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spChangeEmployeePassword(string newPassword, string employeeEmail, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spChangeEmployeePassword", newPasswordParameter, employeeEmailParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spWriteOff(Nullable<int> inventoryID, string reason, Nullable<System.DateTime> writeOffDate, Nullable<int> writeOffID, Nullable<int> quantity, Nullable<int> newQuantity, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var writeOffDateParameter = writeOffDate.HasValue ?
                new ObjectParameter("WriteOffDate", writeOffDate) :
                new ObjectParameter("WriteOffDate", typeof(System.DateTime));
    
            var writeOffIDParameter = writeOffID.HasValue ?
                new ObjectParameter("WriteOffID", writeOffID) :
                new ObjectParameter("WriteOffID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var newQuantityParameter = newQuantity.HasValue ?
                new ObjectParameter("NewQuantity", newQuantity) :
                new ObjectParameter("NewQuantity", typeof(int));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWriteOff", inventoryIDParameter, reasonParameter, writeOffDateParameter, writeOffIDParameter, quantityParameter, newQuantityParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddInventoryItemType(string typeName, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddInventoryItemType", typeNameParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    
        public virtual int spAddUnitOFMeasure(string unitOfMeasure, Nullable<System.DateTime> aLDate, Nullable<System.TimeSpan> aLTime, string aLUser, string aLTransType, string aLCritInfo)
        {
            var unitOfMeasureParameter = unitOfMeasure != null ?
                new ObjectParameter("UnitOfMeasure", unitOfMeasure) :
                new ObjectParameter("UnitOfMeasure", typeof(string));
    
            var aLDateParameter = aLDate.HasValue ?
                new ObjectParameter("ALDate", aLDate) :
                new ObjectParameter("ALDate", typeof(System.DateTime));
    
            var aLTimeParameter = aLTime.HasValue ?
                new ObjectParameter("ALTime", aLTime) :
                new ObjectParameter("ALTime", typeof(System.TimeSpan));
    
            var aLUserParameter = aLUser != null ?
                new ObjectParameter("ALUser", aLUser) :
                new ObjectParameter("ALUser", typeof(string));
    
            var aLTransTypeParameter = aLTransType != null ?
                new ObjectParameter("ALTransType", aLTransType) :
                new ObjectParameter("ALTransType", typeof(string));
    
            var aLCritInfoParameter = aLCritInfo != null ?
                new ObjectParameter("ALCritInfo", aLCritInfo) :
                new ObjectParameter("ALCritInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUnitOFMeasure", unitOfMeasureParameter, aLDateParameter, aLTimeParameter, aLUserParameter, aLTransTypeParameter, aLCritInfoParameter);
        }
    }
}
